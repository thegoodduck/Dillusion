import sys
import os
import base64
try:
    from PyQt5.QtWidgets import QApplication, QWizard, QWizardPage, QVBoxLayout, QLabel, QLineEdit, QCheckBox, QGroupBox, QRadioButton, QPushButton
    from PyQt5.QtCore import Qt
except ImportError:
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "PyQt5", "--break-system-packages"])

import shutil
# Base64-encoded contents of main.py
MAIN_PY = b''

# Base64-encoded contents of ad_selectors.json
AD_SELECTORS_JSON = b'WyIuYWQtYmFubmVyIiwgIi5hZC1jb250YWluZXIiLCAiLmFkIl0='

# Base64-encoded contents of blocked_domains.json
BLOCKED_DOMAINS_JSON = b'WwogICAgImRvdWJsZWNsaWNrLm5ldCIsCiAgICAiZ29vZ2xlYWRzZXJ2aWNlcy5jb20iLAogICAgImFkdmVydGlzaW5nLmNvbSIsCiAgICAiYWRueHMuY29tIiwKICAgICJhZHNydnIub3JnIiwKICAgICJhZHRlY2h1cy5jb20iLAogICAgImFtYXpvbi1hZHN5c3RlbS5jb20iLAogICAgImJpZHN3aXRjaC5uZXQiLAogICAgImNhc2FsZW1lZGlhLmNvbSIsCiAgICAiY29udGV4dHdlYi5jb20iLAogICAgImNyaXRlby5jb20iLAogICAgImNyaXRlb2lzLmNvbSIsCiAgICAiZGVtZGV4Lm5ldCIsCiAgICAiZG91YmxlY2xpY2suY29tIiwKICAgICJleG9jbGljay5jb20iLAogICAgImV4b3Nydi5jb20iLAogICAgImV5ZWJsYXN0ZXIuY29tIiwKICAgICJleWVyZXR1cm4uY29tIiwKICAgICJleWV3b25kZXIuY29tIiwKICAgICJmYXN0Y2xpY2suY29tIiwKICAgICJmYXN0Y2xpY2submV0IiwKICAgICJmd21ybS5uZXQiLAogICAgImdvb2dsZXN5bmRpY2F0aW9uLmNvbSIsCiAgICAiaW52aXRlbWVkaWEuY29tIiwKICAgICJpcHJvbW90aXZlLmNvbSIsCiAgICAiaml2b3guY29tIiwKICAgICJsaWppdC5jb20iLAogICAgIm1lZGlhZm9yZ2UuY29tIiwKICAgICJtZWRpYXBsZXguY29tIiwKICAgICJtaWxsZW5uaWFsbWVkaWEuY29tIiwKICAgICJtb2F0YWRzLmNvbSIsCiAgICAibW9va2llMS5jb20iLAogICAgIm9wZW54LmNvbSIsCiAgICAib3BlbngubmV0IiwKICAgICJwdWJtYXRpYy5jb20iLAogICAgInB1bHNlcG9pbnQuY29tIiwKICAgICJyZWFsbWVkaWEuY29tIiwKICAgICJyZXZzY2kubmV0IiwKICAgICJybGNkbi5jb20iLAogICAgInJ1Ymljb25wcm9qZWN0LmNvbSIsCiAgICAic2NvcmVjYXJkcmVzZWFyY2guY29tIiwKICAgICJzZXJ2aW5nLXN5cy5jb20iLAogICAgInNoYXJldGhpcy5jb20iLAogICAgInNtYXJ0YWRzZXJ2ZXIuY29tIiwKICAgICJzdGFydGFwcC5jb20iLAogICAgInN0YXJ0YXBwc2VydmljZS5jb20iLAogICAgInRlYWRzLnR2IiwKICAgICJ0cmliYWxmdXNpb24uY29tIiwKICAgICJ0dXJuLmNvbSIsCiAgICAidW5kZXJkb2dtZWRpYS5jb20iLAogICAgInVuZGVydG9uZS5jb20iLAogICAgInZpZGlibGUudHYiLAogICAgInlpZWxkbWFuYWdlci5jb20iLAogICAgInlpZWxkbW8uY29tIiwKICAgICJ6ZWRvLmNvbSIsCiAgICAiMm83Lm5ldCIsCiAgICAiMzNhY3Jvc3MuY29tIiwKICAgICI0aW5mby5jb20iLAogICAgIjRtYWRzLmNvbSIsCiAgICAiNWRhdGEuaW5mbyIsCiAgICAiYTgubmV0IiwKICAgICJhYWRkenouY29tIiwKICAgICJhYXgtdXMtZWFzdC5hbWF6b24tYWRzeXN0ZW0uY29tIiwKICAgICJhYXgtdXMtd2VzdC5hbWF6b24tYWRzeXN0ZW0uY29tIiwKICAgICJhYmFjYXN0LmNvbSIsCiAgICAiYWJhY2FzdC5uZXQiLAogICAgImFidGFzdHkuY29tIiwKICAgICJhY2JhZGdlLmNvIiwKICAgICJhY2JhZGdlLmNvbSIsCiAgICAiYWNiYWRnZS5pbyIsCiAgICAiYWNiYWRnZS5uZXQiLAogICAgImFjYmFkZ2Uub3JnIiwKICAgICJhY2JhZGdlLnRlY2giLAogICAgImFjYmFkZ2UudG9wIiwKICAgICJhY2JhZGdlLnh5eiIsCiAgICAiYWNiYWRnZXAuY29tIiwKICAgICJhY2JhZGdlcC5uZXQiLAogICAgImFjYmFkZ2VwLm9yZyIsCiAgICAiYWNiYWRnZXAudGVjaCIsCiAgICAiYWNiYWRnZXAudG9wIiwKICAgICJhY2JhZGdlcC54eXoiLAogICAgImFjYmFkZ2V2LmNvbSIsCiAgICAiYWNiYWRnZXYubmV0IiwKICAgICJhY2JhZGdldi5vcmciLAogICAgImFjYmFkZ2V2LnRlY2giLAogICAgImFjYmFkZ2V2LnRvcCIsCiAgICAiYWNiYWRnZXYueHl6IiwKICAgICJhY2JhZGdleC5jb20iLAogICAgImFjYmFkZ2V4Lm5ldCIsCiAgICAiYWNiYWRnZXgub3JnIiwKICAgICJhY2JhZGdleC50ZWNoIiwKICAgICJhY2JhZGdleC50b3AiLAogICAgImFjYmFkZ2V4Lnh5eiIsCiAgICAiYWNiYWRnZXkuY29tIiwKICAgICJhY2JhZGdleS5uZXQiLAogICAgImFjYmFkZ2V5Lm9yZyIsCiAgICAiYWNiYWRnZXkudGVjaCIsCiAgICAiYWNiYWRnZXkudG9wIiwKICAgICJhY2JhZGdleS54eXoiLAogICAgImFjYmFkZ2V6LmNvbSIsCiAgICAiYWNiYWRnZXoubmV0IiwKICAgICJhY2JhZGdlei5vcmciLAogICAgImFjYmFkZ2V6LnRlY2giLAogICAgImFjYmFkZ2V6LnRvcCIsCiAgICAiYWNiYWRnZXoueHl6IiwKICAgICJhY2JhZGdmLmNvbSIsCiAgICAiYWNiYWRnZi5uZXQiLAogICAgImFjYmFkZ2Yub3JnIiwKICAgICJhY2JhZGdmLnRlY2giLAogICAgImFjYmFkZ2YudG9wIiwKICAgICJhY2JhZGdmLnh5eiIsCiAgICAiYWNiYWRnbS5jb20iLAogICAgImFjYmFkZ20ubmV0IiwKICAgICJhY2JhZGdtLm9yZyIsCiAgICAiYWNiYWRnbS50ZWNoIiwKICAgICJhY2JhZGdtLnRvcCIsCiAgICAiYWNiYWRnbS54eXoiLAogICAgImFjYmFkZ3IuY29tIiwKICAgICJhY2JhZGdyLm5ldCIsCiAgICAiYWNiYWRnci5vcmciLAogICAgImFjYmFkZ3IudGVjaCIsCiAgICAiYWNiYWRnci50b3AiLAogICAgImFjYmFkZ3IueHl6IiwKICAgICJhY2JhZGdzLmNvbSIsCiAgICAiYWNiYWRncy5uZXQiLAogICAgImFjYmFkZ3Mub3JnIiwKICAgICJhY2JhZGdzLnRlY2giLAogICAgImFjYmFkZ3MudG9wIiwKICAgICJhY2JhZGdzLnh5eiIsCiAgICAiYWNiYWRndC5jb20iLAogICAgImFjYmFkZ3QubmV0IiwKICAgICJhY2JhZGd0Lm9yZyIsCiAgICAiYWNiYWRndC50ZWNoIiwKICAgICJhY2JhZGd0LnRvcCIsCiAgICAiYWNiYWRndC54eXoiLAogICAgImFjYmFkZ3cuY29tIiwKICAgICJhY2JhZGd3Lm5ldCIsCiAgICAiYWNiYWRndy5vcmciLAogICAgImFjYmFkZ3cudGVjaCIsCiAgICAiYWNiYWRndy50b3AiLAogICAgImFjYmFkZ3cueHl6IiwKICAgICJhY2JhZGd5LmNvbSIsCiAgICAiYWNiYWRneS5uZXQiLAogICAgImFjYmFkZ3kub3JnIiwKICAgICJhY2JhZGd5LnRlY2giLAogICAgImFjYmFkZ3kudG9wIiwKICAgICJhY2JhZGd5Lnh5eiIsCiAgICAiYWNiYWRnei5jb20iLAogICAgImFjYmFkZ3oubmV0IiwKICAgICJhY2JhZGd6Lm9yZyIsCiAgICAiYWNiYWRnei50ZWNoIiwKICAgICJhY2JhZGd6LnRvcCIsCiAgICAiYWNiYWRnei54eXoiLAogICAgImFjYmFkdi5jb20iLAogICAgImFjYmFkdi5uZXQiLAogICAgImFjYmFkdi5vcmciLAogICAgImFjYmFkdi50ZWNoIiwKICAgICJhY2JhZHYudG9wIiwKICAgICJhY2JhZHYueHl6IiwKICAgICJhY2JhZHguY29tIiwKICAgICJhY2JhZHgubmV0IiwKICAgICJhY2JhZHgub3JnIiwKICAgICJhY2JhZHgudGVjaCIsCiAgICAiYWNiYWR4LnRvcCIsCiAgICAiYWNiYWR4Lnh5eiIsCiAgICAiYWNiYWR5LmNvbSIsCiAgICAiYWNiYWR5Lm5ldCIsCiAgICAiYWNiYWR5Lm9yZyIsCiAgICAiYWNiYWR5LnRlY2giLAogICAgImFjYmFkeS50b3AiLAogICAgImFjYmFkeS54eXoiLAogICAgImFjYmFkei5jb20iLAogICAgImFjYmFkei5uZXQiLAogICAgImFjYmFkei5vcmciLAogICAgImFjYmFkei50ZWNoIiwKICAgICJhY2JhZHoudG9wIiwKICAgICJhY2JhZHoueHl6IiwKICAgICJhY2JjbS5jb20iLAogICAgImFjYmNtLm5ldCIsCiAgICAiYWNiY20ub3JnIiwKICAgICJhY2JjbS50ZWNoIiwKICAgICJhY2JjbS50b3AiLAogICAgImFjYmNtLnh5eiIsCiAgICAiYWNiY3MuY29tIiwKICAgICJhY2Jjcy5uZXQiLAogICAgImFjYmNzLm9yZyIsCiAgICAiYWNiY3MudGVjaCIsCiAgICAiYWNiY3MudG9wIiwKICAgICJhY2Jjcy54eXoiLAogICAgImFjYmN4LmNvbSIsCiAgICAiYWNiY3gubmV0IiwKICAgICJhY2JjeC5vcmciLAogICAgImFjYmN4LnRlY2giLAogICAgImFjYmN4LnRvcCIsCiAgICAiYWNiY3gueHl6IiwKICAgICJhY2JjeS5jb20iLAogICAgImFjYmN5Lm5ldCIsCiAgICAiYWNiY3kub3JnIiwKICAgICJhY2JjeS50ZWNoIiwKICAgICJhY2JjeS50b3AiLAogICAgImFjYmN5Lnh5eiIsCiAgICAiYWNiY3ouY29tIiwKICAgICJhY2Jjei5uZXQiLAogICAgImFjYmN6Lm9yZyIsCiAgICAiYWNiY3oudGVjaCIsCiAgICAiYWNiY3oudG9wIiwKICAgICJhY2Jjei54eXoiLAogICAgImFjYmRtLmNvbSIsCiAgICAiYWNiZG0ubmV0IiwKICAgICJhY2JkbS5vcmciLAogICAgImFjYmRtLnRlY2giLAogICAgImFjYmRtLnRvcCIsCiAgICAiYWNiZG0ueHl6IiwKICAgICJhY2Jkcy5jb20iLAogICAgImFjYmRzLm5ldCIsCiAgICAiYWNiZHMub3JnIiwKICAgICJhY2Jkcy50ZWNoIiwKICAgICJhY2Jkcy50b3AiLAogICAgImFjYmRzLnh5eiIsCiAgICAiYWNiZHguY29tIiwKICAgICJhY2JkeC5uZXQiLAogICAgImFjYmR4Lm9yZyIsCiAgICAiYWNiZHgudGVjaCIsCiAgICAiYWNiZHgudG9wIiwKICAgICJhY2JkeC54eXoiLAogICAgImFjYmR5LmNvbSIsCiAgICAiYWNiZHkubmV0IiwKICAgICJhY2JkeS5vcmciLAogICAgImFjYmR5LnRlY2giXQ=='
class LocationPage(QWizardPage):
    def __init__(self, parent=None):
        super(LocationPage, self).__init__(parent)
        self.setTitle("Installation Location")
        self.setSubTitle("Choose where to install Dillusion Browser.")
        self.location_edit = QLineEdit()
        self.location_edit.setPlaceholderText("Enter installation path or leave blank for default")
        layout = QVBoxLayout()
        layout.addWidget(self.location_edit)
        self.setLayout(layout)

    def validatePage(self):
        location = self.location_edit.text()
        if location and not os.path.isdir(location):
            return False
        return True

class OptionsPage(QWizardPage):
    def __init__(self, parent=None):
        super(OptionsPage, self).__init__(parent)
        self.setTitle("Installation Options")
        self.setSubTitle("Choose additional options for the installation.")
        desktop_shortcut = QCheckBox("Create desktop shortcut")
        start_menu_shortcut = QCheckBox("Create start menu shortcut")
        layout = QVBoxLayout()
        options_group = QGroupBox("Options")
        options_layout = QVBoxLayout()
        options_layout.addWidget(desktop_shortcut)
        options_layout.addWidget(start_menu_shortcut)
        options_group.setLayout(options_layout)
        layout.addWidget(options_group)
        self.setLayout(layout)
# ... (rest of the code remains the same) ...
class IntroPage(QWizardPage):
    def __init__(self, parent=None):
        super(IntroPage, self).__init__(parent)
        self.setTitle("Welcome to the Dillusion Browser Installer")
        label = QLabel("This wizard will guide you through the installation process.")
        layout = QVBoxLayout()
        layout.addWidget(label)
        self.setLayout(layout)
class ConclusionPage(QWizardPage):
    def __init__(self, parent=None):
        super(ConclusionPage, self).__init__(parent)
        self.setTitle("Installation Complete")
        label = QLabel("Dillusion Browser has been installed successfully. ")
        layout = QVBoxLayout()
        layout.addWidget(label)
        self.setLayout(layout)

class InstallerWizard(QWizard):
    def __init__(self, parent=None):
        super(InstallerWizard, self).__init__(parent)
        self.addPage(IntroPage())
        self.addPage(LocationPage())
        self.addPage(OptionsPage())
        self.addPage(ConclusionPage())
        self.setWindowTitle("Dillusion Browser Installer")
        self.setWizardStyle(QWizard.ModernStyle)

    def accept(self):
        location = self.page(1).layout().itemAt(0).widget().text()
        if not location:
            location = os.path.join(os.path.expanduser("~"), "Dillusion Browser")
        options_page = self.page(2)

        # Create the installation directory if it doesn't exist
        os.makedirs(location, exist_ok=True)

        # Write the base64-encoded files to the installation directory
        with open(os.path.join(location, "main.py"), "wb") as f:
            f.write(base64.b64decode(MAIN_PY))
        with open(os.path.join(location, "ad_selectors.json"), "wb") as f:
            f.write(base64.b64decode(AD_SELECTORS_JSON))
        with open(os.path.join(location, "blocked_domains.json"), "wb") as f:
            f.write(base64.b64decode(BLOCKED_DOMAINS_JSON))
        # Create start menu shortcut
        run_sh_path = os.path.join(location, "run.sh")
        print('[WARN] Sudo needed')
        with open(run_sh_path, "w") as f:
            f.write(f"#!/bin/sh\npython3 {os.path.join(location, 'main.py')}")
        os.chmod(run_sh_path, 0o755)  # Make the script executable
        # Here, you could perform additional installation tasks based on the selected options
        print(f"Installing Dillusion Browser to: {location}")

        super().accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    wizard = InstallerWizard()
    wizard.show()
    sys.exit(app.exec_())
