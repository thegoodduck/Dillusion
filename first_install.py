import sys
import os
import base64
from PyQt5.QtWidgets import QApplication, QWizard, QWizardPage, QVBoxLayout, QLabel, QLineEdit, QCheckBox, QGroupBox, QRadioButton, QPushButton
from PyQt5.QtCore import Qt
import shutil
# Base64-encoded contents of main.py
MAIN_PY = b''

# Base64-encoded contents of ad_selectors.json
AD_SELECTORS_JSON = b'WyIuYWQtYmFubmVyIiwgIi5hZC1jb250YWluZXIiLCAiLmFkIl0='

# Base64-encoded contents of blocked_domains.json
BLOCKED_DOMAINS_JSON = b'WyJkb3VibGVjbGljay5uZXQiLCAiZ29vZ2xlYWRzZXJ2aWNlcy5jb20iLCAiYWR2ZXJ0aXNpbmcuY29tIl0='
class LocationPage(QWizardPage):
    def __init__(self, parent=None):
        super(LocationPage, self).__init__(parent)
        self.setTitle("Installation Location")
        self.setSubTitle("Choose where to install Dillusion Browser.")
        self.location_edit = QLineEdit()
        self.location_edit.setPlaceholderText("Enter installation path or leave blank for default")
        layout = QVBoxLayout()
        layout.addWidget(self.location_edit)
        self.setLayout(layout)

    def validatePage(self):
        location = self.location_edit.text()
        if location and not os.path.isdir(location):
            return False
        return True

class OptionsPage(QWizardPage):
    def __init__(self, parent=None):
        super(OptionsPage, self).__init__(parent)
        self.setTitle("Installation Options")
        self.setSubTitle("Choose additional options for the installation.")
        desktop_shortcut = QCheckBox("Create desktop shortcut")
        start_menu_shortcut = QCheckBox("Create start menu shortcut")
        layout = QVBoxLayout()
        options_group = QGroupBox("Options")
        options_layout = QVBoxLayout()
        options_layout.addWidget(desktop_shortcut)
        options_layout.addWidget(start_menu_shortcut)
        options_group.setLayout(options_layout)
        layout.addWidget(options_group)
        self.setLayout(layout)
# ... (rest of the code remains the same) ...
class IntroPage(QWizardPage):
    def __init__(self, parent=None):
        super(IntroPage, self).__init__(parent)
        self.setTitle("Welcome to the Dillusion Browser Installer")
        label = QLabel("This wizard will guide you through the installation process.")
        layout = QVBoxLayout()
        layout.addWidget(label)
        self.setLayout(layout)
class ConclusionPage(QWizardPage):
    def __init__(self, parent=None):
        super(ConclusionPage, self).__init__(parent)
        self.setTitle("Installation Complete")
        label = QLabel("Dillusion Browser has been installed successfully. ")
        layout = QVBoxLayout()
        layout.addWidget(label)
        self.setLayout(layout)

class InstallerWizard(QWizard):
    def __init__(self, parent=None):
        super(InstallerWizard, self).__init__(parent)
        self.addPage(IntroPage())
        self.addPage(LocationPage())
        self.addPage(OptionsPage())
        self.addPage(ConclusionPage())
        self.setWindowTitle("Dillusion Browser Installer")
        self.setWizardStyle(QWizard.ModernStyle)

    def accept(self):
        location = self.page(1).layout().itemAt(0).widget().text()
        if not location:
            location = os.path.join(os.path.expanduser("~"), "Dillusion Browser")
        options_page = self.page(2)

        # Create the installation directory if it doesn't exist
        os.makedirs(location, exist_ok=True)

        # Write the base64-encoded files to the installation directory
        with open(os.path.join(location, "main.py"), "wb") as f:
            f.write(base64.b64decode(MAIN_PY))
        with open(os.path.join(location, "ad_selectors.json"), "wb") as f:
            f.write(base64.b64decode(AD_SELECTORS_JSON))
        with open(os.path.join(location, "blocked_domains.json"), "wb") as f:
            f.write(base64.b64decode(BLOCKED_DOMAINS_JSON))
        # Create start menu shortcut
        run_sh_path = os.path.join(location, "run.sh")
        print('[WARN] Sudo needed')
        with open(run_sh_path, "w") as f:
            f.write(f"#!/bin/sh\npython3 {os.path.join(location, 'main.py')}")
        os.chmod(run_sh_path, 0o755)  # Make the script executable
        # Here, you could perform additional installation tasks based on the selected options
        print(f"Installing Dillusion Browser to: {location}")

        super().accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    wizard = InstallerWizard()
    wizard.show()
    sys.exit(app.exec_())
